syntax = "proto3";

package routerrpc;

import "lightning.proto";

/**
Router is a service that offers advanced interaction with the router backend.
*/
service Router {
    /**
    SendPaymentV2 attempts to route a payment described by the passed
    PaymentRequest to the final destination. The call returns a stream of
    payment updates.
    */
    rpc SendPaymentV2(SendPaymentRequest) returns (stream lnrpc.Payment);

    /**
    TrackPaymentV2 returns an update stream for the payment identified by the
    payment hash.
    */
    rpc TrackPaymentV2(TrackPaymentRequest) returns (stream lnrpc.Payment);

    /**
    EstimateRouteFee allows callers to obtain a lower bound w.r.t how much it
    may cost to send an HTLC to the target destination.
    */
    rpc EstimateRouteFee(RouteFeeRequest) returns (RouteFeeResponse);

    /**
    SendToRouteV2 attempts to make a payment via the specified route. This
    method can be used to manual route payments, or debug a flawed route that
    could not be completed by lnd. The call returns a stream of payment updates.
    */
    rpc SendToRouteV2(SendToRouteRequest) returns (stream lnrpc.Payment);

    /**
    ResetMissionControl clears all mission control state and starts with a clean
    slate.
    */
    rpc ResetMissionControl(ResetMissionControlRequest)
        returns (ResetMissionControlResponse);

    /**
    QueryMissionControl exposes the internal mission control state to callers. It
    is a development feature.
    */
    rpc QueryMissionControl(QueryMissionControlRequest)
        returns (QueryMissionControlResponse);

    /**
    XImportMissionControl is an experimental API that imports the mission control
    state from another node.
    */
    rpc XImportMissionControl(XImportMissionControlRequest)
        returns (XImportMissionControlResponse);

    /**
    GetMissionControlConfig returns the current mission control config.
    */
    rpc GetMissionControlConfig(GetMissionControlConfigRequest)
        returns (GetMissionControlConfigResponse);

    /**
    SetMissionControlConfig will set the mission control config. Note that the
    provided config will be merged with the existing config, so any unset fields

    will not be modified.
    */
    rpc SetMissionControlConfig(SetMissionControlConfigRequest)
        returns (SetMissionControlConfigResponse);

    /**
    QueryProbability returns the current success probability estimate for a
    given node pair and amount.
    */
    rpc QueryProbability(QueryProbabilityRequest)
        returns (QueryProbabilityResponse);

    /**
    BuildRoute builds a fully specified route based on a list of hop public
    keys. It retrieves the relevant channel policies from the graph in order to

    calculate the correct fees and time locks.
    */
    rpc BuildRoute(BuildRouteRequest) returns (BuildRouteResponse);

    /**
    SubscribeHtlcEvents creates a uni-directional stream from the server to
    the client which describes the outcome of HTLCs received by the routing
    daemon.
    */
    rpc SubscribeHtlcEvents(SubscribeHtlcEventsRequest)
        returns (stream HtlcEvent);

    /**
    SendHtlc is a lower level call for sending an HTLC through the lightning
    network. The call returns a stream of HTLC events. This is a developing
    API.
    */
    rpc SendHtlc(stream HtlcEvent) returns (stream HtlcEvent);

    /**
    UpdateChanStatus attempts to manually set the state of a channel
    (enabled, disabled, or auto). A manual state update applied to a channel
ll
    will override the server's automated channel management.
    */
    rpc UpdateChanStatus(UpdateChanStatusRequest)
        returns (UpdateChanStatusResponse);
}

message SendPaymentRequest {
    /**
    The identity pubkey of the payment recipient.
    */
    bytes dest = 1;

    /**
    The amount to send in satoshis.
    The fields amt and amt_msat are mutually exclusive.
    */
    int64 amt = 2;

    /**
    The amount to send in millisatoshis.
    The fields amt and amt_msat are mutually exclusive.
    */
    int64 amt_msat = 12;

    /**
    The hash to use within the payment's HTLC.
    */
    bytes payment_hash = 3;

    /**
    An optional payment address to send to. If not specified, a payment address
    will be generated.
    */
    bytes payment_addr = 21;

    /**
    The CLTV delta from the current height that should be used for the timelock
    of the final hop.
    */
    int32 final_cltv_delta = 4;

    /**
    A bare-bones invoice for a payment within the Lightning Network. With the
    dest, payment_hash, and amt fields set, we can make a payment to a
    destination.
    */
    string payment_request = 5;

    /**
    The max number of seconds that this payment should be pending before it should
    be canceled.
    */
    int32 timeout_seconds = 6;

    /**
    The maximum fee in satoshis that should be paid when sending the payment.
    This field is not taken into account if a route is specified in the
    send_to_route field.
    */
    int64 fee_limit_sat = 7;

    /**
    The maximum fee in millisatoshis that should be paid when sending the
    payment. This field is not taken into account if a route is specified in
    the send_to_route field.
    */
    int64 fee_limit_msat = 13;

    /**
    The channel id of the channel that must be taken to the first hop. If zero,
    any channel may be used.
    */
    uint64 outgoing_chan_id = 8 [jstype = JS_STRING];

    /**
    The pubkey of the last hop of the route. If empty, any hop may be used.
    */
    bytes last_hop_pubkey = 14;

    /**
    An optional maximum total time lock for the route. This should not exceed
    lnd's `--max-cltv-expiry` setting. If zero, then the payment will be routed
    with the default maximum time lock.
    */
    uint32 cltv_limit = 9;

    /**
    An optional field that can be used to pass custom records to the final hop.
    This is useful for things like paying to a static invoice, which may require
    additional data to be passed to the destination.
    */
    map<uint64, bytes> dest_custom_records = 10;

    /**
    If set, circular payments to self are permitted.
    */
    bool allow_self_payment = 11;

    /**
    Features assumed to be supported by the final node. All transitive feature
    dependencies must also be set properly. For a given feature bit, F, any
    dependency feature bits (e.g. F-1) must be also set.
    */
    repeated lnrpc.FeatureBit dest_features = 15;

    /**
    The maximum number of parts that the payment may be split into.
    */
    uint32 max_parts = 16;

    /**
    If set to true, then the payment won't be failed if the first attempt
    times out.
    */
    bool no_inflight_updates = 17;

    /**
    The channel ids of the channels that are forbidden to be used for the first
    hop.
    */
    repeated uint64 outgoing_chan_ids = 19;

    /**
    The pubkey of a node that should be avoided, for the first hop. If empty,
    any node may be used.
    */
    bytes first_hop_pubkey = 20;

    /**
    An optional time preference for the payment. Set to a negative value to
    disregard time preference. Routes will be selected based on a trade-off
    between fees and time preference.
    */
    double time_pref = 22;
}

message TrackPaymentRequest {
    /**
    The hash of the payment to look up.
    */
    bytes payment_hash = 1;

    /**
    If set to true, then the payment won't be failed if the first attempt
    times out.
    */
    bool no_inflight_updates = 2;
}

message RouteFeeRequest {
    /**
    The destination once wishes to obtain a routing fee estimate to.
    */
    bytes dest = 1;

    /**
    The amount one wishes to send to the target destination.
    */
    int64 amt_sat = 2;
}

message RouteFeeResponse {
    /**
    A lower bound of the estimated fee to the target destination.
    */
    int64 routing_fee_msat = 1;

    /**
    An estimate of the worst case time delay that can occur.
    */
    int64 time_lock_delay = 2;
}

message SendToRouteRequest {
    /**
    The payment hash to use for the HTLC.
    */
    bytes payment_hash = 1;

    /**
    Route that should be used to attempt to complete the payment.
    */
    lnrpc.Route route = 2;
}

message ResetMissionControlRequest {}

message ResetMissionControlResponse {}

message QueryMissionControlRequest {}

message QueryMissionControlResponse {
    /**
    The set of nodes that have historical payment data.
    */
    repeated PairHistory pairs = 2;
}

message XImportMissionControlRequest {
    /**
    The mission control state to be imported.
    */
    repeated PairHistory pairs = 1;

    /**
    If set, the imported mission control state will be force-merged with the
    existing state. In case of conflicts, the imported state will prevail.
    */
    bool force = 2;
}

message XImportMissionControlResponse {}

message PairHistory {
    /**
    The source node pubkey of the pair.
    */
    bytes node_from = 1;

    /**
    The destination node pubkey of the pair.
    */
    bytes node_to = 2;

    PairData history = 7;
}

message PairData {
    /**
    Time of last failure.
    */
    int64 fail_time = 1;

    /**
    Lowest amount that failed to route through this pair.
    */
    int64 fail_amt_sat = 2;

    /**
    Lowest amount that failed to route through this pair.
    */
    int64 fail_amt_msat = 4;

    /**
    Time of last success.
    */
    int64 success_time = 5;

    /**
    Highest amount that routed successfully through this pair.
    */
    int64 success_amt_sat = 6;

    /**
    Highest amount that routed successfully through this pair.
    */
    int64 success_amt_msat = 7;
}

message GetMissionControlConfigRequest {}

message GetMissionControlConfigResponse {
    /**
    The mission control config.
    */
    MissionControlConfig config = 1;
}

message SetMissionControlConfigRequest {
    /**
    The mission control config to be set.
    */
    MissionControlConfig config = 1;
}

message SetMissionControlConfigResponse {}

message MissionControlConfig {
    /**
    The amount of time mission control will keep failure information around for
    failure pairs.
    */
    uint64 half_life_seconds = 1;

    /**
    The probability of success mission control will assign to pairs that have
    no history.
    */
    float hop_probability = 2;

    /**
    The weight that mission control gives to the historical results of a pair.
    */
    float weight = 3;

    /**
    The maximum number of payment results that mission control will store for a
    given pair.
    */
    uint32 maximum_payment_results = 4;

    /**
    The minimum time that must have passed since the previously recorded failure
    before we will consider the pair again.
    */
    uint64 minimum_failure_relax_interval = 5;

    /**
    The default penalty that is assessed to a channel when it fails to route a
    payment. This is only used if the failure type is unknown.
    */
    uint64 apriori_hopparam_penalty_msat = 6;
}

message QueryProbabilityRequest {
    /**
    The source node pubkey of the pair.
    */
    bytes from_node = 1;

    /**
    The destination node pubkey of the pair.
    */
    bytes to_node = 2;

    /**
    The amount for which to calculate the success probability.
    */
    int64 amt_msat = 3;
}

message QueryProbabilityResponse {
    /**
    The success probability for the requested pair.
    */
    double probability = 1;

    /**
    The historical data for the requested pair.
    */
    PairData history = 2;
}

message BuildRouteRequest {
    /**
    The amount to send in msats.
    */
    int64 amt_msat = 1;

    /**
    The CLTV delta from the current height that should be used for the timelock
    of the final hop.
    */
    int32 final_cltv_delta = 2;

    /**
    The channel id of the channel that must be taken to the first hop. If zero,
    any channel may be used.
    */
    uint64 outgoing_chan_id = 3 [jstype = JS_STRING];

    /**
    A list of hops hints that when specified will be used to construct a route.
    */
    repeated lnrpc.Hop hop_pubkeys = 4;

    /**
    An optional payment address to send to.
    */
    bytes payment_addr = 5;
}

message BuildRouteResponse {
    /**
    A fully specified route that can be used as input for SendToRoute.
    */
    lnrpc.Route route = 1;
}

message SubscribeHtlcEventsRequest {}

enum HtlcEvent_EventType {
    UNKNOWN = 0;
    SEND = 1;
    RECEIVE = 2;
    FORWARD = 3;
}

message HtlcEvent {
    /**
    The short channel id that the HTLC was forwarded over.
    */
    uint64 incoming_channel_id = 1;

    /**
    The short channel id that the HTLC was forwarded to.
    */
    uint64 outgoing_channel_id = 2;

    /**
    The index of the incoming HTLC in the incoming channel.
    */
    uint64 incoming_htlc_id = 3;

    /**
    The index of the outgoing HTLC in the outgoing channel.
    */
    uint64 outgoing_htlc_id = 4;

    /**
    The timestamp of the event.
    */
    uint64 timestamp_ns = 5;

    HtlcEvent_EventType event_type = 6;

    oneof event {
        lnrpc.ForwardEvent forward_event = 7;
        lnrpc.ForwardFailEvent forward_fail_event = 8;
        lnrpc.SettleEvent settle_event = 9;
        lnrpc.LinkFailEvent link_fail_event = 10;
    }
}

message UpdateChanStatusRequest {
    bytes chan_point = 1;
    lnrpc.ChannelUpdate.Action action = 2;
}

message UpdateChanStatusResponse {}
